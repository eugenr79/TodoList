{"version":3,"sources":["containers/EditBox.js","middleware/api.js","actions/index.js","containers/ClearTodo.js","containers/TodoList.js","App.js","serviceWorker.js","state.js","reducers/index.js","reducers/todo.js","reducers/desc.js","index.js"],"names":["EditBox","_ref","input","add","remove","clear","react_default","a","createElement","onSubmit","e","preventDefault","ref","$","onClick","value","api","store","next","action","callAPI","types","endpoint","body","Array","isArray","length","Error","actionWith","data","finalAction","Object","assign","_types","slicedToArray","requestType","successType","failureType","type","fullUrl","init","undefined","method","headers","Accept","Content-Type","JSON","stringify","fetch","then","res","json","callApi","response","error","message","loadTodo","defineProperty","addTodo","text","dispatch","removeTodo","id","clearTodo","selectTodo","payload","Redux","TodoList","state","ownProps","loading","loaded","todos","loadData","load","onSelect","props","shouldGetData","useEffect","rows","map","todo","idx","_id","className","style","height","width","main","columnDefs","field","headerName","rowSelection","onSelectionChanged","event","selectedRows","getSelectedRows","rowData","modules","AllCommunityModules","App","selectedTodo","bindActionCreators","Boolean","window","location","hostname","match","initialState","checked","reducers","objectSpread","concat","toConsumableArray","newTodos","filter","createStore","arguments","reduce","accumulator","current","applyMiddleware","apply","thunk","logger","ReactDOM","render","es","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1987b443.chunk.js","sourcesContent":["import React from 'react';\n\n\nexport function EditBox({\n  add, remove, clear\n}) {\n  let input;  \n  return (\n    <form onSubmit={e=>{\n      e.preventDefault();\n    }}>\n      <textarea ref={$=>input=$}/>\n      <button onClick={() => add(input.value)}>Add</button>\n      <button onClick={() => remove()}>Remove</button>\n      <button onClick={() => clear()}>Clear</button>\n    </form>\n  );\n}\n\n","//import { v1 } from 'uuid'\n\nexport const CALL_API = 'Call API'\n\n//const API_ROOT = 'http://localhost:4000/'\n\nconst callApi = (endpoint, body) => {    \n  const fullUrl = endpoint;//(endpoint.indexOf(API_ROOT) === -1) ? API_ROOT + endpoint : endpoint\n  let init = undefined;\n  if (body)\n    init = {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(body)\n    };\n  return fetch(fullUrl, init).then(res => res.json());\n};\n\nexport const api = store => next => action => {  \n  const callAPI = action[CALL_API]\n  if (typeof callAPI === 'undefined') {\n    return next(action)\n  }\n\n  let { types, endpoint, body } = callAPI\n  if (!Array.isArray(types) || types.length !== 3) {\n    throw new Error('Expected an array of three action types.')\n  }\n  \n  const actionWith = data => {\n    const finalAction = Object.assign({}, action, data)\n    delete finalAction[CALL_API]\n    return finalAction\n  }\n\n  const [ requestType, successType, failureType ] = types\n  next(actionWith({ type: requestType }))\n\n  return callApi(endpoint, body).then(\n    response => next(actionWith({      \n      type: successType,\n      response\n    })),\n    error => next(actionWith({\n      type: failureType,\n      error: error.message || 'Error'\n    }))\n  )  \n}","\nimport { CALL_API } from '../middleware/api'\n\nexport const TODOADD_REQUEST = \"TODOADD_REQUEST\";\nexport const TODOADD_SUCCESS = \"TODOADD_SUCCESS\";\nexport const TODOADD_FAILURE = \"TODOADD_FAILURE\";\n\nexport const TODOREMOVE_REQUEST = \"TODOREMOVE_REQUEST\";\nexport const TODOREMOVE_SUCCESS = \"TODOREMOVE_SUCCESS\";\nexport const TODOREMOVE_FAILURE = \"TODOREMOVE_FAILURE\";\n\nexport const TODOCLEAR_REQUEST = \"TODOCLEAR_REQUEST\";\nexport const TODOCLEAR_SUCCESS = \"TODOCLEAR_SUCCESS\";\nexport const TODOCLEAR_FAILURE = \"TODOCLEAR_FAILURE\";\n\nexport const TODO_SELECT = \"TODO_SELECT\";\n\nexport const TODOLIST_REQUEST = 'TODOLIST_REQUEST'\nexport const TODOLIST_SUCCESS = 'TODOLIST_SUCCESS'\nexport const TODOLIST_FAILURE = 'TODOLIST_FAILURE'\n\n\n\nexport const loadTodo2 = ()=>dispatch=>(\n    dispatch(\n      {\n        [CALL_API]: {\n        types: [ TODOLIST_REQUEST, TODOLIST_SUCCESS, TODOLIST_FAILURE ],\n        endpoint: `todos`,}\n      }\n    ));\n\nexport const loadTodo = ()=>(\n    {\n      [CALL_API]: {\n      types: [ TODOLIST_REQUEST, TODOLIST_SUCCESS, TODOLIST_FAILURE ],\n      endpoint: `todos`,}\n    });\n\nexport const addTodo = (text)=>dispatch=>(\n  dispatch(\n    {\n      [CALL_API]: {\n        types: [ TODOADD_REQUEST, TODOADD_SUCCESS, TODOADD_FAILURE ],\n        endpoint: `todos/add`,\n        body: { text: text }\n      }\n    }\n  ));\n\nexport const removeTodo = (id)=>dispatch=>(\n  dispatch(\n    {\n      [CALL_API]: {\n        types: [ TODOREMOVE_REQUEST, TODOREMOVE_SUCCESS, TODOREMOVE_FAILURE ],\n        endpoint: `todos/remove`,\n        body: { id: id }\n      }\n    }\n  ));\n\n  \n\nexport const clearTodo = ()=>dispatch=>(\n  dispatch(\n    {\n      [CALL_API]: {\n        types: [ TODOCLEAR_REQUEST, TODOCLEAR_SUCCESS, TODOCLEAR_FAILURE ],\n        endpoint: `todos/clear`\n      }\n    }\n  ));\n\n\nexport const selectTodo = (id)=>({\n        type: TODO_SELECT,\n        payload: id\n      });\n\n  \n","import React from 'react';\nimport * as Redux  from \"react-redux\";\nimport {clearTodo} from \"../actions\"\n\n\nfunction Presenter({\n  clear  \n}) {\n  return (\n    <form onSubmit={e=>{\n      e.preventDefault();\n      clear();\n    }}>\n      <button type=\"submit\">Clear</button>\n    </form>\n  );\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    clear: () => dispatch(clearTodo()),    \n  }\n};\n\n\nexport const ClearTodo = Redux.connect(null, mapDispatchToProps)(Presenter);\n","import React, { useEffect } from 'react'\nimport * as Redux  from \"react-redux\";\n\nimport { AgGridReact } from '@ag-grid-community/react';\nimport {AllCommunityModules} from '@ag-grid-community/all-modules';\n\nimport '@ag-grid-community/all-modules/dist/styles/ag-grid.css';\nimport '@ag-grid-community/all-modules/dist/styles/ag-theme-balham.css';\n\nconst TodoListPresenter = (props)=>{\n  const { loading, loaded, todos, loadData, onSelect } = props;\n  const shouldGetData = !loading && !loaded;    \n  useEffect(() => {  \n    if (shouldGetData)  \n      loadData();\n  });  \n  if (shouldGetData)\n    return <p>Loading...</p>    \n  const onSelectionChanged = (event)=>{    \n    if (!onSelect)\n      return;\n    const selectedRows = event.api.getSelectedRows();\n    if (!selectedRows || selectedRows.length === 0)\n      return;\n    const todo = selectedRows[0];\n    onSelect(todo.id);\n  }\n  const rows = todos.map((todo, idx)=>  ({id:todo._id, text:todo.text}));\n  return <div className=\"ag-theme-balham\" style={ {height: '200px', width: '600px'} }>\n      <AgGridReact\n          columnDefs={[\n            { field: 'text', headerName: 'Text' },      \n          ]}          \n          rowSelection='single'\n          onSelectionChanged={onSelectionChanged}\n          rowData={rows}\n          modules={AllCommunityModules}>\n      </AgGridReact>\n    </div>\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    loading: state.loading,\n    loaded: state.loaded,\n    error: state.error,\n    todos: state.todos,\n    loadData: ownProps.load,\n    onSelect: ownProps.onSelect,\n  }\n};\n\nexport const TodoList = Redux.connect(mapStateToProps)(TodoListPresenter);\n\n","import React from 'react';\nimport {bindActionCreators} from 'redux';\nimport * as Redux  from \"react-redux\";\nimport './App.css';\nimport {EditBox, TodoList} from \"./containers\"\nimport {loadTodo, addTodo, removeTodo, clearTodo, selectTodo} from \"./actions\"\n\nconst AppPresenter = (props)=>{  \n  const {addTodo, clearTodo, removeTodo, loadTodo, selectTodo, selectedTodo} = props;\n  const callRemove = ()=>{    \n    if(selectedTodo !== undefined && selectedTodo.length > 0){\n      removeTodo(selectedTodo);\n    }\n      \n  };\n  const onSelect = (id)=>{    \n    selectTodo(id);\n  };  \n  return <div className=\"App\">\n      <EditBox add={addTodo} remove={callRemove} clear={clearTodo}/>\n      <TodoList load={loadTodo} onSelect={onSelect}/>\n    </div>\n}\n\nconst mapDispatchToProps = (dispatch) => {  \n  return bindActionCreators({\n      loadTodo,\n      addTodo,\n      removeTodo,\n      selectTodo,\n      clearTodo\n    }, dispatch)\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    selectedTodo: state.selectedTodo\n  }\n};\n\nexport const App = Redux.connect(mapStateToProps, mapDispatchToProps)(AppPresenter);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import './index.css';\n\nexport const initialState = {  \n  loading:false,\n  loaded:false,\n  error:\"\",\n  todos:[],\n  selectedTodo:\"\",\n  checked:false\n};","import todoReducer from './todo'\nimport descReducer from './desc'\nimport { initialState } from '../state'\n\nconst reducers= [\n  todoReducer,\n  descReducer\n];\n\nexport default function rootReducer(state = initialState, action) {  \n  return reducers.reduce((accumulator, current) => current(accumulator, action), state);\n}\n\n","import *  as ActionTypes from \"../actions\";\n\nconst impl = (state, action) => {\n    switch (action.type) {      \n      case ActionTypes.TODOLIST_REQUEST:\n        return {...state, loading:true, loaded:false } \n      case ActionTypes.TODOLIST_SUCCESS:\n        return {...state, loading:false, loaded:true, todos:action.response } \n      case ActionTypes.TODOLIST_FAILURE:\n        return {...state, loading:false, loaded:true, error:action.error }           \n      \n      case ActionTypes.TODOADD_REQUEST:\n        return {...state, loading:true, loaded:false } \n      case ActionTypes.TODOADD_FAILURE:\n        return {...state, loading:false, loaded:true, error:action.error }           \n      case ActionTypes.TODOADD_SUCCESS:\n        if (action.response && action.response.text)\n          return {...state, \n            todos:[\n              ...state.todos, action.response\n            ]}                \n        else \n          return state;\n\n      case ActionTypes.TODOREMOVE_REQUEST:\n        return {...state, loading:true, loaded:false } \n      case ActionTypes.TODOREMOVE_FAILURE:\n        return {...state, loading:false, loaded:true, error:action.error }           \n      case ActionTypes.TODOREMOVE_SUCCESS:\n        if (action.response && action.response.length > 0)\n        {          \n          const id = action.response;\n          const newTodos = state.todos.filter(function(e) { return e._id !== id });            \n          return {...state, todos:newTodos}                \n        }                  \n        else \n          return state;\n      \n      case ActionTypes.TODOCLEAR_REQUEST:\n        return {...state, loading:true, loaded:false } \n      case ActionTypes.TODOCLEAR_FAILURE:\n        return {...state, loading:false, loaded:true, error:action.error }           \n      case ActionTypes.TODOCLEAR_SUCCESS:\n        if (action.response)\n          return {...state, \n            todos:[]}\n        else \n          return state;\n\n      case ActionTypes.TODO_SELECT:\n        return {...state, \n          selectedTodo:action.payload}\n\n      default:\n        return state\n    }\n  }\nexport default impl","const impl = (state, action) => {\n  switch (action.type) {    \n    default:\n      return state\n  }\n}\nexport default impl","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from \"redux-thunk\";\nimport logger from 'redux-logger'\nimport { Provider } from 'react-redux'\nimport { initialState } from './state'\nimport rootReducer from './reducers'\nimport { api } from \"./middleware\";\n\nconst getMiddlewares = () => {\n  return [thunk, api, logger];\n}\nconst store = createStore(rootReducer, initialState, applyMiddleware(...getMiddlewares()))\nReactDOM.render(<Provider store={store}>\n    <App />\n  </Provider>, \n    document.getElementById('root'));\n    \n\nserviceWorker.unregister();\n"],"sourceRoot":""}